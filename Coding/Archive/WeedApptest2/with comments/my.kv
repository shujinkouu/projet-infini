#:kivy 1.1
## according to https://kivy.org/doc/stable/examples/gen__application__app_with_kv__py.html 
## This is how things are supposed to be presented #:kivy 1.1
#:import Factory kivy.factory.Factory

#Factory.MyHome()
<MyHome@Popup>:
    docname: docname

    FloatLayout:
        Label:
            text: 'Name of the document'
            size_hint: 0.6, 0.2
            pos_hint: {"x":0.2, "top":1}

        TextInput:
            id: docname
            multiline:False
            size_hint: 0.3, 0.2
            pos_hint: {"x":0.35, "top":0.75}

        Button:
            size_hint: 0.3, 0.2
            pos_hint: {"x":0.05, "top":0.25}
            text: 'Submit'
            on_release: var66 = root.docname.text; print("var66: " + var66) ; app.btn5(var66) ; root.dismiss()

        Button:
            size_hint: 0.3, 0.2
            pos_hint: {"x":0.65, "top":0.25}
            text: 'Close'
            on_release:root.dismiss()
        
        FloatLayout:

            size_hint: 0.55, 0.15
            pos_hint: {"x":0.225, "top":0.45}

            canvas.before:
                Color:
                    rgba: 0.5, 0.5, 0.7, 1
                Rectangle:
                    pos: self.pos
                    size: self.size
            Label:
                text: app.txt
                pos_hint: {'center_x':.5, 'center_y': .5}

#Another popup can be called with
#Factory.MyPopup()
<MyPopup@Popup>:

    size_hint: .8, .8
    auto_dismiss: False
    #creating a testlabel id so that the .py file can connect to the .kv file using Factory.MyPopup().testlabel
    #example to point to the text of my label use Factory.MyPopup().testlabel.text
    testlabel: label

    FloatLayout:
        Button:
            size_hint: 0.3, 0.2
            pos_hint: {"x":0.05, "top":0.3}
            text: 'yes'
            #Here I call the btn() function that is under App in the .py file. This function is where the logic plugs the logic outputs to var
            #Then I call my second popup
            #then I close the current popup
            on_release:app.btn2() ; Factory.MySecondPopup().open() ; root.dismiss()

        Button:
            size_hint: 0.3, 0.2
            pos_hint: {"x":0.35, "top":0.3}
            text: 'no'
            on_release:app.btn3() ; Factory.MySecondPopup().open() ; root.dismiss()
        
        Button:
            size_hint: 0.3, 0.2
            pos_hint: {"x":0.65, "top":0.3}
            text: 'Ignore'
            on_release:root.dismiss()
        
        Label:
            id: label
            text: app.var
            size_hint: 0.6, 0.2
            pos_hint: {"x":0.2, "top":1}

#So this way of doing creates a popup with the class Factory so we can refer to it with Factory.PopupName()
<MySecondPopup@Popup>:

    #Setting size turning off the autodismiss function and linking my id: label2 for my label to a name the .py file will be able to call
    size_hint: .8, .8
    auto_dismiss: False
    label2: label2
    
    #Creating my Widget, Popup accepts only one widget so all the widget I wanna display need to be children of a motherwidget here Floatlayout
    FloatLayout:
        #Creating my first subwidget a "yes" button
        Button:
            #Setting the relative size, the relative position the text
            size_hint: 0.45, 0.2
            pos_hint: {"x":0.05, "top":0.3}
            text: 'yes'
            #This piece makes it so that when the button is released it fires off those different functions
            #Factory.MyThirdPopup().open() simply Calls the ThirdPopup to be opened
            #root.dismiss() closes the current popup so that it doesn't seat underneath my interface            
            on_release:app.btn4() ; Factory.MyThirdPopup().open() ; root.dismiss()

        #Second button is pretty much the same but it doesn't display another popup 
        Button:
            size_hint: 0.45, 0.2
            pos_hint: {"x":0.5, "top":0.3}
            text: 'no'
            on_release: root.dismiss()

        #Here I create my label, I set the id to something so that the .py file can access it
        Label:
            id: label2
            #Here I link with the .py file for this text field so that it can be changed easily to display information and feedback to the user
            text: "Do you want to extrapolate the data you have?"
            #Relative pos and size for the text
            size_hint: 0.6, 0.2
            pos_hint: {"x":0.2, "top":1}

#Here I create a third popup it can be called with Factory.MyThirdPopup()
<MyThirdPopup@Popup>:

    #relative size and auto_dismiss at off
    size_hint: .8, .8
    auto_dismiss: False
    
    #Creating the mother widget
    FloatLayout:
        
        #children widget with relative pos size, and some text
        Label:
            text: app.labeltxt
            size_hint: 0.6, 0.2
            pos_hint: {"x":0.2, "top":0.9}
        
        #button to dismiss the popup
        Button:
            text: "Dismiss"
            size_hint: 0.9, 0.2
            pos_hint: {"x":0.05, "top":0.3}
            on_release: root.dismiss()



#Creating the main widget this is what the user see when he first opens the app
<MyGrid>

    #Creating my plug for the variable the user is gonna give us for his calculations
    #they can be accessed using var1 = self.var1.text
    #!!! Right now those don't work this is priorty number 1
    #    size_hint: None, None
    var1: var1
    var2: var2
    var3: var3

    #Creating my mother Widget
    GridLayout:
        #Setting the ammount of columns
        cols:1
        size: root.width, root.height 

        #A child is another GridLayout with 2 columns
        GridLayout:

            cols:2

            #My first label
            Label:
                text: "Quantity bought"

            #The first user provided variable
            TextInput:
                id: var1
                multiline:False
            
            #ect..
            Label:
                text: "Money paid for given quantity"

            TextInput:
                id: var2
                multiline:False

            Label:
                text: "Quantity used"

            TextInput:
                id: var3
                multiline:False

    #Here changing the indent has a dramatic effect on the appearance of the app
    #Try it by adding of deleting indent :)    

    FloatLayout:
        #pos: 200, 200
        #size: self.size
        #A button, when pressed it's callin a menu to change document
        Button:
            text: "Menu"
            on_release: Factory.MyHome().open()
            pos_hint: {'x': 7}

        #A button, when pressed it's callin my first popup       
        Button:
            text: "Ok"
            on_release: root.btn() ; app.btn() ; Factory.MyPopup().open() if root.state == 'on' else None
            #pos_hint: {"x":0.225, "top":1}
#            pos_hint: {"x": 7}
            pos_hint: {'left': 1, 'bottom': 1}